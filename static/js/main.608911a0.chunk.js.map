{"version":3,"sources":["index/App/Elevator/Shaft/Cabin.tsx","index/App/Elevator/Shaft.tsx","index/App/Elevator/Direction.ts","index/App/Elevator/Colors.ts","index/App/Elevator.tsx","index/App.tsx","index.tsx"],"names":["Cabin","floor","color","cabinStyles","transform","backgroundColor","className","id","style","Shaft","Direction","idle","direction","colors","useState","setFloor","useEffect","movementLoop","setInterval","setTimeout","shaftStyles","bg","fg","colorSets","Elevator","Down","Math","random","length","App","elevatorCount","elevators","i","push","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAmBeA,MAXf,YAA4C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAEfC,EAAc,CAClBC,UAAU,cAAD,OAAwB,GAARH,EAAhB,QACTI,gBAAiBH,GAGnB,OAAO,qBAAKI,UAAU,QAAQC,GAAG,QAAQC,MAAOL,K,MC2BnCM,IC1CHC,ED0CGD,EA7Bf,YAAwD,EAAvCE,KAAuC,EAAjCC,UAAkC,IAAvBC,EAAsB,EAAtBA,OAAsB,EAE5BC,mBAAS,GAFmB,mBAE/Cb,EAF+C,KAExCc,EAFwC,KAItDC,qBAAU,WACRC,IACAC,aAAY,WACVD,MACC,QACF,IAEH,IAAMA,EAAe,WACnBE,YAAW,kBAAMJ,EAAS,KAAI,KAC9BI,YAAW,kBAAMJ,EAAS,KAAI,KAC9BI,YAAW,kBAAMJ,EAAS,KAAI,KAC9BI,YAAW,kBAAMJ,EAAS,KAAI,OAG1BK,EAAc,CAClBf,gBAAiBQ,EAAOQ,IAG1B,OACE,qBAAKf,UAAU,QAAQE,MAAOY,EAA9B,SACI,cAAC,EAAD,CAAOnB,MAAOA,EAAOC,MAAOW,EAAOS,QE9BrCC,EAAwB,CAE1B,CACIF,GAAI,UACJC,GAAI,WAGR,CACID,GAAI,UACJC,GAAI,WAGR,CACID,GAAI,UACJC,GAAI,WAGR,CACID,GAAI,UACJC,GAAI,WAGR,CACID,GAAI,UACJC,GAAI,a,SD/BAZ,O,WAAAA,I,gBAAAA,M,KEeGc,MAVf,WAAqB,IAAD,EAEQV,oBAAS,GAFjB,mBAETH,EAFS,aAGkBG,mBAASJ,EAAUe,OAHrC,mBAGTb,EAHS,KAKhB,OALgB,KAMZ,cAAC,EAAD,CAAOD,KAAMA,EAAMC,UAAWA,EAAWC,ODXAU,EAAUG,KAAKzB,MAAMyB,KAAKC,SAAWJ,EAAUK,YEoBjFC,MAhBf,WAKE,IALc,IAAD,EAE6Bf,mBAAS,GAFtC,mBAENgB,EAFM,KAIPC,GAJO,KAIK,IACTC,EAAI,EAAGA,EAAIF,EAAeE,IACjCD,EAAUE,KAAK,cAAC,EAAD,GAAeD,IAGhC,OACE,qBAAK1B,UAAU,MAAf,SACGyB,KCVPG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.608911a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Cabin/Cabin.css\";\n\ntype CabinProps = {\n    floor: number,\n    color: string\n}\n\nfunction Cabin({floor, color}: CabinProps) {\n  \n  const cabinStyles = {\n    transform: `translateY(${floor * 13}rem)`,\n    backgroundColor: color\n  };\n\n  return <div className=\"cabin\" id=\"cabin\" style={cabinStyles}>\n  </div>;\n}\n\nexport default Cabin;\n","import React, { useEffect, useState } from \"react\";\nimport { moveMessagePortToContext } from \"worker_threads\";\nimport { Colorset } from \"./Colors\";\nimport { Direction } from \"./Direction\";\nimport Cabin from \"./Shaft/Cabin\";\nimport \"./Shaft/Shaft.css\";\n\ntype ShaftProps = {\n  idle: boolean;\n  direction: Direction;\n  colors: Colorset\n};\n\nfunction Shaft({ idle, direction, colors }: ShaftProps) {\n\n  const [floor, setFloor] = useState(0)\n\n  useEffect(() => {\n    movementLoop()\n    setInterval(() => {\n      movementLoop()\n    }, 12000)\n  }, [])\n\n  const movementLoop = () => {\n    setTimeout(() => setFloor(1), 3000)\n    setTimeout(() => setFloor(2), 6000)\n    setTimeout(() => setFloor(1), 9000)\n    setTimeout(() => setFloor(0), 12000)\n  }\n\n  const shaftStyles = {\n    backgroundColor: colors.bg\n  }\n\n  return (\n    <div className=\"shaft\" style={shaftStyles}>\n        <Cabin floor={floor} color={colors.fg}/>\n    </div>\n  );\n}\n\nexport default Shaft;\n","export enum Direction {\n    Up,\n    Down\n}","export const getRandomColorSet = (): Colorset => colorSets[Math.floor(Math.random() * colorSets.length)]\n\nexport type Colorset = {\n    bg: string,\n    fg: string\n}\n\nconst colorSets: Colorset[] = [\n    // blue\n    {\n        bg: \"#89c4f4\",\n        fg: \"#6bb9f0\"\n    },\n    // white\n    {\n        bg: \"#bdc3c7\",\n        fg: \"#ecf0f1\"\n    },\n    // orange\n    {\n        bg: \"#dd893f\",\n        fg: \"#e67e22\"\n    },\n    // red\n    {\n        bg: \"#e74c3c\",\n        fg: \"#e83519\"\n    },\n    // green\n    {\n        bg: \"#54b980\",\n        fg: \"#2ecc71\"\n    }\n]","import React, { useState } from \"react\"\nimport Shaft from \"./Elevator/Shaft\"\nimport { getRandomColorSet } from \"./Elevator/Colors\"\nimport { Direction } from \"./Elevator/Direction\"\n\nfunction Elevator() {\n\n    const [idle, setIdle] = useState(true)\n    const [direction, setDirection] = useState(Direction.Down)\n    \n    return (\n        <Shaft idle={idle} direction={direction} colors={getRandomColorSet()}/>\n    )\n}\n\nexport default Elevator","import React, {useState} from 'react';\nimport \"./App/App.css\";\nimport Elevator from \"./App/Elevator\"\n\nfunction App() {\n  \n  const [elevatorCount, setElevatorCount] = useState(1)\n  \n  const elevators = []\n  for (let i = 0; i < elevatorCount; i++) {\n    elevators.push(<Elevator key={i}/>)\n  }\n\n  return (\n    <div className=\"App\">\n      {elevators}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index/index.css';\nimport App from './index/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}