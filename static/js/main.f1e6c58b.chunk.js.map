{"version":3,"sources":["index/App/Elevator/Shaft/Cabin.tsx","index/App/Elevator/Shaft.tsx","index/App/Elevator/Direction.ts","index/App/Elevator/Colors.ts","index/App/Elevator/Shaft/Shaft.ts","index/App/Elevator.tsx","index/App.tsx","index.tsx"],"names":["Cabin","floor","color","cabinStyles","transform","backgroundColor","className","id","style","ShaftComponent","Direction","colors","direction","shaftStyles","bg","fg","colorSets","Shaft","floorCount","passengers","idle","this","Array","None","Math","random","length","max","min","Elevator","shaftCount","useState","shafts","setShafts","useEffect","_shafts","i","pop","shaft","push","shaftComponents","forEach","App","elevatorShafts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAiBeA,MATf,YAA8C,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAChBC,EAAc,CAClBC,UAAU,cAAD,OAAwB,GAARH,EAAhB,QACTI,gBAAiBH,GAGnB,OAAO,qBAAKI,UAAU,QAAQC,GAAG,QAAQC,MAAOL,K,MCWnCM,ICzBHC,EDyBGD,EAZf,YAAmE,IAAzCR,EAAwC,EAAxCA,MAAkBU,GAAsB,EAAjCC,UAAiC,EAAtBD,QACpCE,EAAc,CAClBR,gBAAiBM,EAAOG,IAG1B,OACE,qBAAKR,UAAU,QAAQE,MAAOK,EAA9B,SACE,cAAC,EAAD,CAAOZ,MAAOA,EAAOC,MAAOS,EAAOI,Q,wBCpB7BL,O,WAAAA,I,eAAAA,I,gBAAAA,M,KCAL,IAQDM,EAAwB,CAE5B,CACEF,GAAI,UACJC,GAAI,WAGN,CACED,GAAI,UACJC,GAAI,WAGN,CACED,GAAI,UACJC,GAAI,WAGN,CACED,GAAI,UACJC,GAAI,WAGN,CACED,GAAI,UACJC,GAAI,YC3BaE,E,WAQnB,WAAYC,GAAqB,yBAP1BjB,WAOyB,OANzBiB,gBAMyB,OALzBC,gBAKyB,OAJzBP,eAIyB,OAHzBQ,UAGyB,OAFzBT,YAEyB,EAC9BU,KAAKpB,MAAQ,EACboB,KAAKH,WAAaA,EAClBG,KAAKF,WAAa,IAAIG,MACtBD,KAAKT,UAAYF,EAAUa,KAC3BF,KAAKD,MAAO,EACZC,KAAKV,ODlBPK,EAAUQ,KAAKvB,MAAMuB,KAAKC,SAAWT,EAAUU,S,qDCsB7CL,KAAKpB,MAAQuB,KAAKG,IAAI,EAAGN,KAAKpB,MAAQ,K,iCAItCoB,KAAKpB,MAAQuB,KAAKI,IAAIP,KAAKH,WAAYG,KAAKpB,MAAQ,O,WCmBzC4B,MAnCf,YAA8D,IAA1CC,EAAyC,EAAzCA,WAAYZ,EAA6B,EAA7BA,WAA6B,EAC/Ba,mBAAS,IAAIT,OADkB,mBACpDU,EADoD,KAC5CC,EAD4C,KAG3DC,qBAAU,WACR,IAAMC,EAAO,YAAOH,GACpB,GAAIF,IAAeK,EAAQT,OAC3B,GAAII,EAAaK,EAAQT,OAAzB,CACE,IAAK,IAAIU,EAAI,EAAGA,GAAKD,EAAQT,OAASI,EAAYM,IAChDD,EAAQE,MAEVJ,EAAUE,OAJZ,CAOA,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAaK,EAAQT,OAAQU,IAAK,CACrD,IAAME,EAAQ,IAAIrB,EAAMC,GACxBiB,EAAQI,KAAKD,GAEfL,EAAUE,MACT,CAACL,EAAYE,EAAQd,IAExB,IAAMsB,EAAkB,IAAIlB,MAY5B,OAXAU,EAAOS,SAAQ,SAACH,EAAOF,GACrBI,EAAgBD,KACd,cAAC,EAAD,CACEtC,MAAOqC,EAAMrC,MACbW,UAAWF,EAAUa,KACrBZ,OAAQ2B,EAAM3B,QACTyB,OAKJ,qBAAK9B,UAAU,WAAf,SAA2BkC,KC7BrBE,MAVf,WAAgB,IAAD,EAC8BX,mBAAS,GADvC,mBACNY,EADM,KAGb,OAHa,KAIX,qBAAKrC,UAAU,MAAf,SACE,cAAC,EAAD,CAAUwB,WAAYa,EAAgBzB,WAAY,OCJxD0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f1e6c58b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Cabin/Cabin.css\";\n\ntype CabinProps = {\n  floor: number;\n  color: string;\n};\n\nfunction Cabin({ floor, color }: CabinProps) {\n  const cabinStyles = {\n    transform: `translateY(${floor * 13}rem)`,\n    backgroundColor: color,\n  };\n\n  return <div className=\"cabin\" id=\"cabin\" style={cabinStyles}></div>;\n}\n\nexport default Cabin;\n","import React, { useEffect, useState } from \"react\";\nimport { moveMessagePortToContext } from \"worker_threads\";\nimport { Colorset } from \"./Colors\";\nimport { Direction } from \"./Direction\";\nimport Cabin from \"./Shaft/Cabin\";\nimport \"./Shaft/Shaft.css\";\n\ntype ShaftProps = {\n  floor: number;\n  direction: Direction;\n  colors: Colorset;\n};\n\nfunction ShaftComponent({ floor, direction, colors }: ShaftProps) {\n  const shaftStyles = {\n    backgroundColor: colors.bg,\n  };\n\n  return (\n    <div className=\"shaft\" style={shaftStyles}>\n      <Cabin floor={floor} color={colors.fg} />\n    </div>\n  );\n}\n\nexport default ShaftComponent;\n","export enum Direction {\n  Up,\n  Down,\n  None,\n}\n","export const getRandomColorSet = (): Colorset =>\n  colorSets[Math.floor(Math.random() * colorSets.length)];\n\nexport type Colorset = {\n  bg: string;\n  fg: string;\n};\n\nconst colorSets: Colorset[] = [\n  // blue\n  {\n    bg: \"#89c4f4\",\n    fg: \"#6bb9f0\",\n  },\n  // white\n  {\n    bg: \"#bdc3c7\",\n    fg: \"#ecf0f1\",\n  },\n  // orange\n  {\n    bg: \"#dd893f\",\n    fg: \"#e67e22\",\n  },\n  // red\n  {\n    bg: \"#e74c3c\",\n    fg: \"#e83519\",\n  },\n  // green\n  {\n    bg: \"#54b980\",\n    fg: \"#2ecc71\",\n  },\n];\n","import { Colorset } from \"../Colors\";\nimport { Direction } from \"../Direction\";\nimport Passenger from \"../Passenger\";\nimport { getRandomColorSet } from \"../Colors\";\n\nexport default class Shaft {\n  public floor: number;\n  public floorCount: number;\n  public passengers: Passenger[];\n  public direction: Direction;\n  public idle: boolean;\n  public colors: Colorset;\n\n  constructor(floorCount: number) {\n    this.floor = 0;\n    this.floorCount = floorCount;\n    this.passengers = new Array<Passenger>();\n    this.direction = Direction.None;\n    this.idle = true;\n    this.colors = getRandomColorSet();\n  }\n\n  public moveUp() {\n    this.floor = Math.max(0, this.floor - 1);\n  }\n\n  public moveDown() {\n    this.floor = Math.min(this.floorCount, this.floor + 1);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport ShaftComponent from \"./Elevator/Shaft\";\nimport Shaft from \"./Elevator/Shaft/Shaft\";\nimport { Direction } from \"./Elevator/Direction\";\nimport \"./Elevator/Elevator.css\";\n\ntype ElevatorProps = {\n  shaftCount: number;\n  floorCount: number;\n};\n\nfunction Elevator({ shaftCount, floorCount }: ElevatorProps) {\n  const [shafts, setShafts] = useState(new Array<Shaft>());\n\n  useEffect(() => {\n    const _shafts = [...shafts];\n    if (shaftCount === _shafts.length) return;\n    if (shaftCount < _shafts.length) {\n      for (let i = 0; i <= _shafts.length - shaftCount; i++) {\n        _shafts.pop();\n      }\n      setShafts(_shafts);\n      return;\n    }\n    for (let i = 0; i <= shaftCount - _shafts.length; i++) {\n      const shaft = new Shaft(floorCount);\n      _shafts.push(shaft);\n    }\n    setShafts(_shafts);\n  }, [shaftCount, shafts, floorCount]);\n\n  const shaftComponents = new Array<JSX.Element>();\n  shafts.forEach((shaft, i) => {\n    shaftComponents.push(\n      <ShaftComponent\n        floor={shaft.floor}\n        direction={Direction.None}\n        colors={shaft.colors}\n        key={i}\n      />\n    );\n  });\n\n  return <div className=\"elevator\">{shaftComponents}</div>;\n}\n\nexport default Elevator;\n","import React, { useState } from \"react\";\nimport \"./App/App.css\";\nimport Elevator from \"./App/Elevator\";\n\nfunction App() {\n  const [elevatorShafts, setElevatorCount] = useState(2);\n\n  return (\n    <div className=\"App\">\n      <Elevator shaftCount={elevatorShafts} floorCount={3} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index/index.css';\nimport App from './index/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}